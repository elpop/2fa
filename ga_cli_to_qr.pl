#!/usr/bin/perl
#====================================================================#
# Program => ga_cli_to_qr.pl (In Perl 5.0)             version 0.0.1 #
#====================================================================#
# Autor         => Fernando "El Pop" Romo        (pop@cofradia.org)  #
# Creation date => 06/September/2022                                 #
#--------------------------------------------------------------------#
# Info => This program Read the $HOME/.ga_cli/keys file and generate #
#         QR images for bulk load into the Google Authenticator App. #
#--------------------------------------------------------------------#
# This code are released under the GPL 3.0 License. Any change must  #
# be report to the authors                                           #
#                 (c) 2022 - Fernando Romo                           #
#====================================================================#
use strict;
use MIME::Base64; 
use Google::ProtocolBuffers;
use Imager::QRCode;

# Definition of the Protocol Buffers generated by Google Authenticator Export Accounts options
Google::ProtocolBuffers->parse("
    syntax = \"proto2\";
    message GA {
        repeated Keys Index = 1;
        message Keys {
            required string    pass      = 1;
            required string    keyid     = 2;
            optional string    issuer    = 3;
            optional Algorithm algorithm = 4;
            optional DigitSize digits    = 5;
            optional OtpType   type      = 6;
            enum Algorithm  {
                ALGO_UNSPECIFIED = 0;
                SHA1             = 1;
                SHA256           = 2;
                SHA512           = 3;
                MD5              = 4;
            }
            enum DigitSize {
                DS_UNSPECIFIED = 0;
                SIX            = 1;
                EIGHT          = 2;
            }
            enum OtpType {
                OT_UNSPECIFIED = 0;
                HOTP           = 1;
                TOTP           = 2;
            }
         }
         optional int32 version = 2;
         optional int32 QRCount = 3;
         optional int32 QRIndex = 4;
     }",
     {create_accessors => 1}
);

# Work variables
my $work_dir = $ENV{'HOME'} . '/.ga_cli'; # keys directory
my %export_ring = ( 'version' => 1,
                    'QRCount' => 1,
                    'QRIndex' => 0, );
my $ga_qr = 'otpauth-migration://offline?data='; # GA export accounts header on QR
my $key_counter = 0;
my $current = 1;

# Load config File
my %key_ring = ();
if (-f "$work_dir\/keys") {
    %key_ring = do "$work_dir\/keys";
}

# Date
my ($year, $month, $day) = (localtime( time() ))[5,4,3];
$year = $year + 1900;
$month += 1;
my $date = sprintf("%04d%02d%02d",$year,$month,$day);

# Obtain keys to process
my $total_keys = scalar(keys %key_ring);
my $images_count = int($total_keys / 10);
if ( ($total_keys % 10) > 0) {
    $images_count++;
}
$export_ring{QRCount} = $images_count;

# If have keys to process
if ($total_keys > 0) {

    # Load Protocol Buffer Array to process
    foreach my $issuer (sort { "\U$a" cmp "\U$b" } keys %key_ring) {
        $key_counter++;
        push @{$export_ring{'Index'}},
             ({
              'issuer'    => "$issuer",
              'keyid'     => "$key_ring{$issuer}{keyid}",
              'pass'      => "$key_ring{$issuer}{secret}",
              'algorithm' => $key_ring{$issuer}{algorithm},
              'digits'    => $key_ring{$issuer}{digits},
              'type'      => $key_ring{$issuer}{type},
             });
    
        # Generate QR each 10 keys    
        if ( ( ($key_counter % 10) == 0 )
            || ($key_counter == $total_keys) ) {
            
            # Process Protocol Buffers from de MIME Base64 Data
            my $protocol_buffer = GA->encode(\%export_ring);
    
            # Encode MIME Base64                
            my $mime_data = encode_base64($protocol_buffer);
            
            # URL Encode
            $mime_data =~ s/([^A-Za-z0-9])/sprintf("%%%02X", ord($1))/seg;
            $mime_data =~ s/\%0A//g; # avoid new line
            
            # generate QR image
            my $qrcode = Imager::QRCode->new(
                    size          => 4,
                    margin        => 1,
                    version       => 1,
                    level         => 'M',
                    casesensitive => 1,
                    lightcolor    => Imager::Color->new(255, 255, 255),
                    darkcolor     => Imager::Color->new(0, 0, 0),
            );
            my $img = $qrcode->plot("$ga_qr$mime_data");
            my $qr_file = sprintf("export_keys_%08d_%02d_of_%02d.jpg", $date, $current, $images_count);
            $img->write(file => "$qr_file");
            
            # Clean Up the has for the next 10 keys
            $export_ring{'Index'} = ();
            $export_ring{QRIndex} = $current++; # Next batch number
        }
    }
}
else {
    print "Error: No keys to process\n";
}
